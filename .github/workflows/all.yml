name: Build

on:
  pull_request: null
  workflow_dispatch:
    inputs:
      myCommit:
        description: Commit SHA1
        required: false
        default: ''
        type: string
  push:
    branches:
      - master
  release:
    types:
      - published

env:
  NDK_REVISION: r26-rc1

jobs:
  all:
    strategy:
      fail-fast: false
      matrix:
        target:
          - windows_x86
          - windows_x86_64
          - darwin_arm64
          - darwin_x86_64
          - linux_x86
          - linux_x86_64
          - android_x86
          - android_x86_64
          - android_arm32
          - android_arm64
        include:
          - {target: windows_x86,       platform: windows,  architecture: x86,        os: windows-2022, shell: 'msys2 {0}'}
          - {target: windows_x86_64,    platform: windows,  architecture: x86_64,     os: windows-2022, shell: 'msys2 {0}'}
          - {target: darwin_arm64,      platform: darwin,   architecture: arm64,      os: macos-13,     shell: bash}
          - {target: darwin_x86_64,     platform: darwin,   architecture: x86_64,     os: macos-13,     shell: bash}
          - {target: linux_x86,         platform: linux,    architecture: x86,        os: ubuntu-22.04, shell: bash}
          - {target: linux_x86_64,      platform: linux,    architecture: x86_64,     os: ubuntu-22.04, shell: bash}
          - {target: android_x86,       platform: android,  architecture: x86,        os: ubuntu-22.04, shell: bash}
          - {target: android_x86_64,    platform: android,  architecture: x86_64,     os: ubuntu-22.04, shell: bash}
          - {target: android_arm32,     platform: android,  architecture: arm32,      os: ubuntu-22.04, shell: bash}
          - {target: android_arm64,     platform: android,  architecture: arm64,      os: ubuntu-22.04, shell: bash}
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: ${{matrix.shell}}
    steps:
      - name: '[windows] Setup msys'
        if: matrix.platform == 'windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          install: make yasm zip
          path-type: inherit
          release: false # Reuse existing msys installation that's part of a runner image.

      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: recursive
          ref: '${{inputs.myCommit}}'

      - name: '[windows] Setup MSVC'
        if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: '${{matrix.architecture}}'

      # Ironically, this is what the official build guide is recommending to do:
      # https://trac.ffmpeg.org/wiki/CompilationGuide/MSVC
      - name: '[windows] Drop link.exe'
        if: matrix.platform == 'windows'
        run: |
          rm -rf /usr/bin/link.exe
          which link.exe

      - name: '[linux-x86] Install Dependencies'
        if: matrix.platform == 'linux' && matrix.architecture == 'x86'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib

      - name: '[android] Setup NDK'
        if: matrix.platform == 'android'
        id: setup-ndk
        uses: nttld/setup-ndk@v1.3.1
        with:
          ndk-version: '${{env.NDK_REVISION}}'
          add-to-path: false
          local-cache: true
          link-to-sdk: true

      - name: '[android] Set ANDROID_NDK'
        if: matrix.platform == 'android'
        run: |
          echo "ANDROID_NDK=${{steps.setup-ndk.outputs.ndk-path}}" >> $GITHUB_ENV          

      # Re-linting on other platforms doesn't make sense, we don't have platform-specific source files.
      - name: '[linux-x86_64] Lint'
        if: matrix.platform == 'linux' && matrix.architecture == 'x86_64'
        run: |
          cmake -B build-lint -S . -DCMAKE_BUILD_TYPE=Debug
          cmake --build build-lint --target lint_all

      - name: 'Build and test'
        run: |
          scripts/build_test_all.sh -j4 "${{matrix.platform}}" "."
